{"id":"node_modules/sequelize/lib/dialects/sqlite/sqlite-utils.js","dependencies":[{"name":"C:\\Development\\Web\\open_layers_app\\node_modules\\sequelize\\lib\\dialects\\sqlite\\sqlite-utils.js.map","includedInParent":true,"mtime":1657618230871},{"name":"C:\\Development\\Web\\open_layers_app\\package.json","includedInParent":true,"mtime":1657618246844},{"name":"C:\\Development\\Web\\open_layers_app\\node_modules\\sequelize\\package.json","includedInParent":true,"mtime":1657618224754}],"generated":{"js":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar __defProp = Object.defineProperty;\n\nvar __markAsModule = function __markAsModule(target) {\n  return __defProp(target, \"__esModule\", {\n    value: true\n  });\n};\n\nvar __export = function __export(target, all) {\n  __markAsModule(target);\n\n  for (var name in all) {\n    __defProp(target, name, {\n      get: all[name],\n      enumerable: true\n    });\n  }\n};\n\n__export(exports, {\n  withSqliteForeignKeysOff: function withSqliteForeignKeysOff() {\n    return _withSqliteForeignKeysOff;\n  }\n});\n\nfunction _withSqliteForeignKeysOff(_x, _x2, _x3) {\n  return _withSqliteForeignKeysOff2.apply(this, arguments);\n}\n\nfunction _withSqliteForeignKeysOff2() {\n  _withSqliteForeignKeysOff2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sequelize, options, cb) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return sequelize.query(\"PRAGMA foreign_keys = OFF\", options);\n\n          case 3:\n            _context.next = 5;\n            return cb();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            _context.prev = 6;\n            _context.next = 9;\n            return sequelize.query(\"PRAGMA foreign_keys = ON\", options);\n\n          case 9:\n            return _context.finish(6);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0,, 6, 10]]);\n  }));\n  return _withSqliteForeignKeysOff2.apply(this, arguments);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":28,"column":8}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":28,"column":9}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":28,"column":16}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":28,"column":18}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":29,"column":2}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":29,"column":26}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":29,"column":28}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":30,"column":4}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":30,"column":11}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":30,"column":36}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":31,"column":2}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":32,"column":1}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":32,"column":2}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":34,"column":9}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":39,"column":90}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":50},"generated":{"line":39,"column":107}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":39,"column":116}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":72},"generated":{"line":39,"column":118}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":39,"column":125}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":95},"generated":{"line":39,"column":127}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":39,"column":129}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":40,"column":4}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":41,"column":6}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":42,"column":8}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":43,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":44,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":45,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":46,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":46,"column":19}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":46,"column":28}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":20},"generated":{"line":46,"column":29}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":46,"column":34}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":26},"generated":{"line":46,"column":35}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":46,"column":62}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":55},"generated":{"line":46,"column":64}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":46,"column":71}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":46,"column":72}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":48,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":49,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":50,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":8,"column":17},"generated":{"line":50,"column":19}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":8,"column":17},"generated":{"line":50,"column":21}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":50,"column":23}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":52,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":53,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":55,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":56,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":57,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":58,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":58,"column":19}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":58,"column":28}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":20},"generated":{"line":58,"column":29}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":58,"column":34}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":26},"generated":{"line":58,"column":35}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":58,"column":61}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":54},"generated":{"line":58,"column":63}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":58,"column":70}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":58,"column":71}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":60,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":61,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":63,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":64,"column":10}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":65,"column":12}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":66,"column":8}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":67,"column":6}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":68,"column":4}},{"source":"../../../src/dialects/sqlite/sqlite-utils.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":69,"column":2}}],"sources":{"../../../src/dialects/sqlite/sqlite-utils.ts":"import type { Sequelize } from '../../sequelize.js';\nimport type { QueryOptions } from '../abstract/query-interface.js';\n\nexport async function withSqliteForeignKeysOff<T>(sequelize: Sequelize, options: QueryOptions, cb: () => Promise<T>): Promise<T> {\n  try {\n    await sequelize.query('PRAGMA foreign_keys = OFF', options);\n\n    return await cb();\n  } finally {\n    await sequelize.query('PRAGMA foreign_keys = ON', options);\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"0706348081965872180cc6a1532c84af","cacheData":{"env":{}}}